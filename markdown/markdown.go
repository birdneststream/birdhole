package markdown

import (
	"bytes"
	"html/template"

	"github.com/microcosm-cc/bluemonday"
	"github.com/yuin/goldmark"
	"github.com/yuin/goldmark/extension"
	"github.com/yuin/goldmark/renderer/html"
)

var (
	mdParser  goldmark.Markdown
	sanitizer *bluemonday.Policy
)

// Init initializes the markdown parser and sanitizer.
func Init() {
	mdParser = goldmark.New(
		goldmark.WithExtensions(
			extension.GFM, // GitHub Flavored Markdown
			extension.Linkify,
			extension.Strikethrough,
			extension.Table,
			extension.TaskList,
		),
		goldmark.WithRendererOptions(
			html.WithHardWraps(), // Render soft wraps as hard wraps
			html.WithXHTML(),     // Render as XHTML
			html.WithUnsafe(),    // Allow raw HTML (will be sanitized later)
		),
	)

	// Use Bluemonday's UGC policy as a base - allows common formatting and links
	sanitizer = bluemonday.UGCPolicy()
	// Add policies for tables if needed
	sanitizer.AllowTables()
	// Add policies for task lists if needed
	sanitizer.AllowElements("input").AllowAttrs("type", "disabled", "checked").OnElements("input")

	// Allow specific classes for syntax highlighting if using a library like highlight.js
	// sanitizer.AllowAttrs("class").Matching(regexp.MustCompile(`^language-\w+$`)).OnElements("code")
	// sanitizer.AllowAttrs("class").Matching(regexp.MustCompile(`^hljs.*$`)).OnElements("span")

	// Important: Add rel="nofollow" to links (UGC includes this)
	sanitizer.RequireNoFollowOnLinks(true)
	// sanitizer.RequireUGCSourceRelOnLinks(true) // Removed as likely deprecated/merged
}

// Render converts markdown text to sanitized HTML.
func Render(markdownText string) (template.HTML, error) {
	var buf bytes.Buffer
	if err := mdParser.Convert([]byte(markdownText), &buf); err != nil {
		return "", err
	}

	// Sanitize the HTML generated by goldmark
	sanitizedHTML := sanitizer.SanitizeBytes(buf.Bytes())

	// Safe: HTML is sanitized by bluemonday before conversion to template.HTML
	return template.HTML(sanitizedHTML), nil // #nosec G203
}
